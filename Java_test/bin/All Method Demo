Example one
.........................................

1) instance method memory allocation during object creation
2) instance method calls depend on object  creation
3)  static method allocate memory during class loading
4) static method call only once during class loading


public class TestOne {
// instance Method 
	void m1(){
		System.out.println("M1 Instance Methos");
	}
	// static Method
	static void  m2(){
		System.out.println("M2 Static Methos");
	}
	
public static void main(String[] args) {
	
 TestOne one=new TestOne();
  one.m1();
  one.m2();
  TestOne.m2();	
	}
}

.................... Example Two ..........................

public class ExTwo {
	// instance Method 
		void m1(int a, Character ch){ // var in parameter is local val 
			System.out.println("M1 Instance Methos");
			System.out.println("INT VAL IS "+ a);
			System.out.println("Character VAL IS "+ ch);
		}
		// static Method
		static void  m2(String s,double d){
			System.out.println("M2 Static Methos");
			System.out.println("M2 Static Methos String val is -- "+ s);
			System.out.println("M2 Static Methos Double val is -- "+ d);
		}
	public static void main(String[] args) {
		 ExTwo exTwo=new ExTwo();
		 exTwo.m1(23, 'c'); // Accessing instance Method
      // Accessing static Methods		 
		 ExTwo.m2("Pragati",  10.5);
	}

}
.....................  Example Three ..............................................
class X{}
class Emp{}
class Y {}
class Student{}

public class ExThree {
		// instance Method 
			void m1(X x, Emp e){ // var in parameter is local val 
				// here val ids type of class 
				System.out.println("M1 instance Method"); 
			}
			// static Method here values of class type
			static void  m2(Y y,Student s){
				System.out.println("M2 static Method"); 
 
			}
		public static void main(String[] args) {
			ExThree exTwo=new ExThree();
			exTwo.m1(new X(),new Emp() );
			
			ExThree.m2(new Y(), new Student());
		}

	}
/////////////////////  Example Four .///////////////////////////////////////////////
 

// Two Method have same signature not allowed
public class ExFour {

	// instance Method 
	void m1( ){ // var in parameter is local val 
		// here val ids type of class 
		System.out.println("M1 instance Method"); 
	}
	// static Method here values of class type
	  void  m1( ){
		System.out.println("M2 instance Method"); 

	}
public static void main(String[] args) {
	ExFour exFour=new ExFour();
	exFour.m1( );
	exFour.m2();
}

}
///////////////////// Example Five 5 ///////////////////////////

//Method Must have return Type

public class ExFive {

	m2(){}
	
	public static void main(String[] args) {
ExFive exFive=new ExFive();
 exFive.m2();

	}

}


//Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
//	The method m2() is undefined for the type ExFive
//
//	at com.test.method.ExFive.main(ExFive.java:11)
..................... Example Six  6 ..............................................................

Method inside method not alowed in java 7



.........................  Example 7 ...............

public class ExSeven {
	int x=100;  // instance variable
	int y=1000;
	
	void add(int x,int y){// method Signature
		System.out.println("Addition of number is--- "+ (x+y)); // local variable
		System.out.println("Addition of number is--- "+ (this.x+this.y));
	}											// for using instance variable
	

	public static void main(String[] args) {
     
		ExSeven exSeven = new ExSeven();
		exSeven.add(120, 22);
		
	}

}

.................. Example 8 ................

public class ExEight {
	int x=100;  // instance variable
	int y=1000;
	
	static void   add(int x,int y){// method Signature
		System.out.println("Addition of number is--- "+ (x+y)); // local variable
		System.out.println("Addition of number is--- "+ (this.x+this.y));
	}											// for using instance variable
												// use this keyword
	

	public static void main(String[] args) {
     
		ExEight exSeven = new ExEight();
		exSeven.add(120, 22);
		
	}

}

Exception in thread "main" java.lang.Error: Unresolved compilation problems: 
	Cannot use this in a static context
	Cannot use this in a static context

	at com.test.method.ExSeven.add(ExSeven.java:9)
	at com.test.method.ExSeven.main(ExSeven.java:16)
	
	Note :- We can not use this keyword inside static method
.....................  Example 9 .................................
// operator overloading not possible in java accept + operator 

 public class ExNine {

	public static void main(String[] args) {
   System.out.println("Ratan" +" Durga");
   System.out.println(10+20);
   System.out.println(10+ "Ratan" +" Durga");
   System.out.println(10+30+ "Ratan" +" Durga");
   System.out.println((12+90)+"Ratan" +" Durga");
   System.out.println(10+ "Ratan" +" Durga"+90);
   System.out.println(10+40+ "Ratan" +" Durga"+90+70);
	}
}
 













